{"version":3,"sources":["logo.svg","Page1.js","Timer.js","NavList.js","AppNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Page1","react_default","a","createElement","react","Row","Col","Component","Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","setState","_this2","interval","setInterval","tick","clearInterval","toLocaleTimeString","NavList","listItems","items","map","item","NavDropdown","Item","href","onClick","navigate","id","name","title","AppNav","Navbar","collapseOnSelect","bg","expand","className","Brand","src","logo","alt","width","height","Toggle","aria-controls","Collapse","Nav","Link","src_NavList","components","NavItem","src_Timer","App","index","previous","size","next","getComponents","code","src_Page1","Container","src_AppNav","Button","variant","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76583278.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component, Fragment } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\n\r\nclass Page1 extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col>\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page1;","import React, {Component, Fragment} from 'react'\r\n\r\nclass Timer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time: new Date()\r\n        };\r\n    }\r\n\r\n    tick() {\r\n        this.setState(state => ({time: new Date()}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.interval = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Fragment>\r\n                {this.state.time.toLocaleTimeString()}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react'\r\nimport { NavDropdown } from 'react-bootstrap';\r\n\r\nclass NavList extends Component {\r\n\r\n\r\n    render(props) {\r\n        const items = this.props.items;\r\n        const listItems = items.map((item) =>\r\n            <NavDropdown.Item href=\"#\" onClick={() => this.props.navigate(item.id)}>{item.name}</NavDropdown.Item>);\r\n        return <NavDropdown title=\"Pages\">{listItems}</NavDropdown>\r\n    }\r\n}\r\n\r\nexport default NavList","import React, { Component } from 'react';\r\nimport Timer from './Timer.js'\r\nimport logo from './logo.svg'\r\nimport NavList from './NavList.js'\r\nimport {Navbar, Nav, NavItem} from 'react-bootstrap'\r\n\r\nclass AppNav extends Component {\r\n    render() {\r\n        return(\r\n        <Navbar collapseOnSelect bg=\"secondary\" expand=\"md\" className=\"Navbar\">\r\n            <Navbar.Brand><a href=\"#\" onClick={() => this.props.navigate(0)}><img src={logo} alt=\"react\" width=\"40\" height=\"40\" className=\"App-logo\" /></a></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"https://github.com/CasualSpy/react-demo-code\">Github</Nav.Link>\r\n                    <NavList items={this.props.components} navigate={this.props.navigate} />\r\n                </Nav>\r\n                <Nav>\r\n                    <NavItem><Timer /></NavItem>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppNav","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport { Button, Container, Row, Col, } from 'react-bootstrap'\r\nimport Page1 from './Page1.js'\r\nimport AppNav from './AppNav.js'\r\n\r\n\r\n//Component principale, \r\nclass App extends Component {\r\n\r\n  state = {\r\n    index: 0\r\n  }\r\n\r\n  previous = (size) => {\r\n    const { index } = this.state;\r\n    if (index === 0) this.setState({ index: size - 1 });\r\n    else this.setState({ index: index - 1 });\r\n  }\r\n\r\n  next = (size) => {\r\n    const { index } = this.state;\r\n    if (index === size - 1) this.setState({ index: 0 });\r\n    else this.setState({ index: index + 1 });\r\n  }\r\n\r\n  navigate = (id) => {\r\n    this.setState({ index: id });\r\n  }\r\n\r\n  getComponents = () => {\r\n    return [\r\n      {\r\n        id: 0,\r\n        name: \"Page 1\",\r\n        code: (\r\n          <Page1 />\r\n        )\r\n      },\r\n      {\r\n        id: 1,\r\n        name: \"Page 2\",\r\n        code: (\r\n          <Fragment>\r\n          </Fragment>\r\n        )\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Page 3\",\r\n        code: (\r\n          <Fragment>\r\n          </Fragment>\r\n        )\r\n      }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"App\">\r\n        <AppNav components={this.getComponents()} navigate={this.navigate} />\r\n        <h1>{this.getComponents()[this.state.index].name}</h1>\r\n        <Row>\r\n          <Col>\r\n            <Button variant=\"secondary\" onClick={() => this.previous(this.getComponents().length)}>&larr;</Button>\r\n            <Button variant=\"secondary\" onClick={() => this.next(this.getComponents().length)}>&rarr;</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {this.getComponents()[this.state.index].code}\r\n          </Col>\r\n        </Row>\r\n        \r\n      </Container >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}